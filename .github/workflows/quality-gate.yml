name: Quality Gate

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

permissions:
  contents: read
  pull-requests: write
  checks: write

jobs:
  quality-gate:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint
        continue-on-error: false

      - name: Run TypeScript type checking
        run: npm run type-check
        continue-on-error: false

      - name: Run tests with coverage
        run: npm run test:coverage
        continue-on-error: false

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: true
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

      - name: Check coverage thresholds
        run: |
          echo "Checking coverage thresholds..."
          npm run test:coverage -- --passWithNoTests
          
          # Extract coverage percentages from coverage report
          COVERAGE_LINES=$(cat coverage/lcov.info | grep 'LF:' | awk -F: '{sum+=$2} END {print sum}')
          COVERAGE_LINES_HIT=$(cat coverage/lcov.info | grep 'LH:' | awk -F: '{sum+=$2} END {print sum}')
          COVERAGE_FUNCTIONS=$(cat coverage/lcov.info | grep 'FNF:' | awk -F: '{sum+=$2} END {print sum}')
          COVERAGE_FUNCTIONS_HIT=$(cat coverage/lcov.info | grep 'FNH:' | awk -F: '{sum+=$2} END {print sum}')
          COVERAGE_BRANCHES=$(cat coverage/lcov.info | grep 'BRF:' | awk -F: '{sum+=$2} END {print sum}')
          COVERAGE_BRANCHES_HIT=$(cat coverage/lcov.info | grep 'BRH:' | awk -F: '{sum+=$2} END {print sum}')
          
          # Calculate percentages
          if [ "$COVERAGE_LINES" -gt 0 ]; then
            LINE_PERCENTAGE=$(echo "scale=2; ($COVERAGE_LINES_HIT * 100) / $COVERAGE_LINES" | bc)
          else
            LINE_PERCENTAGE=100
          fi
          
          if [ "$COVERAGE_FUNCTIONS" -gt 0 ]; then
            FUNCTION_PERCENTAGE=$(echo "scale=2; ($COVERAGE_FUNCTIONS_HIT * 100) / $COVERAGE_FUNCTIONS" | bc)
          else
            FUNCTION_PERCENTAGE=100
          fi
          
          if [ "$COVERAGE_BRANCHES" -gt 0 ]; then
            BRANCH_PERCENTAGE=$(echo "scale=2; ($COVERAGE_BRANCHES_HIT * 100) / $COVERAGE_BRANCHES" | bc)
          else
            BRANCH_PERCENTAGE=100
          fi
          
          echo "Line Coverage: $LINE_PERCENTAGE%"
          echo "Function Coverage: $FUNCTION_PERCENTAGE%"
          echo "Branch Coverage: $BRANCH_PERCENTAGE%"
          
          # Check thresholds (80% minimum)
          THRESHOLD=80
          
          if (( $(echo "$LINE_PERCENTAGE < $THRESHOLD" | bc -l) )); then
            echo "‚ùå Line coverage ($LINE_PERCENTAGE%) is below threshold ($THRESHOLD%)"
            exit 1
          fi
          
          if (( $(echo "$FUNCTION_PERCENTAGE < $THRESHOLD" | bc -l) )); then
            echo "‚ùå Function coverage ($FUNCTION_PERCENTAGE%) is below threshold ($THRESHOLD%)"
            exit 1
          fi
          
          if (( $(echo "$BRANCH_PERCENTAGE < $THRESHOLD" | bc -l) )); then
            echo "‚ùå Branch coverage ($BRANCH_PERCENTAGE%) is below threshold ($THRESHOLD%)"
            exit 1
          fi
          
          echo "‚úÖ All coverage thresholds met!"

      - name: Build library
        run: npm run build
        continue-on-error: false

      - name: Check build artifacts
        run: |
          echo "Checking build artifacts..."
          ls -la dist/
          
          # Verify required files exist
          if [ ! -f "dist/index.js" ]; then
            echo "‚ùå Missing dist/index.js"
            exit 1
          fi
          
          if [ ! -f "dist/index.esm.js" ]; then
            echo "‚ùå Missing dist/index.esm.js"
            exit 1
          fi
          
          if [ ! -f "dist/index.d.ts" ]; then
            echo "‚ùå Missing dist/index.d.ts"
            exit 1
          fi
          
          echo "‚úÖ All build artifacts present"

      - name: Check package.json validity
        run: |
          echo "Validating package.json..."
          npm pack --dry-run
          echo "‚úÖ Package.json is valid"

      - name: Security audit
        run: |
          echo "Running security audit..."
          npm audit --audit-level moderate
          echo "‚úÖ Security audit passed"

      - name: Check for TODO/FIXME comments
        run: |
          echo "Checking for TODO/FIXME comments..."
          TODO_COUNT=$(grep -r "TODO\|FIXME\|XXX\|HACK" src/ --include="*.ts" --include="*.js" | wc -l || true)
          
          if [ "$TODO_COUNT" -gt 10 ]; then
            echo "‚ö†Ô∏è  Found $TODO_COUNT TODO/FIXME comments. Consider addressing them."
            grep -r "TODO\|FIXME\|XXX\|HACK" src/ --include="*.ts" --include="*.js" || true
          else
            echo "‚úÖ TODO/FIXME count acceptable ($TODO_COUNT)"
          fi

      - name: Bundle size check
        run: |
          echo "Checking bundle size..."
          
          # Check if dist files are reasonable size (< 1MB each)
          for file in dist/*.js; do
            if [ -f "$file" ]; then
              SIZE=$(stat -f%z "$file" 2>/dev/null || stat -c%s "$file")
              SIZE_KB=$((SIZE / 1024))
              
              if [ "$SIZE_KB" -gt 1024 ]; then
                echo "‚ö†Ô∏è  Large bundle detected: $file ($SIZE_KB KB)"
              else
                echo "‚úÖ Bundle size OK: $file ($SIZE_KB KB)"
              fi
            fi
          done

      - name: Performance test examples
        run: |
          echo "Testing example applications..."
          
          # Test Nuxt example can build
          cd examples/nuxt-ecommerce
          npm install --prefer-offline --no-audit
          npm run build
          
          echo "‚úÖ Example applications build successfully"

      - name: Comment PR with quality metrics
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            // Read coverage data
            let coverageData = 'üìä **Quality Gate Results**\n\n';
            
            try {
              // This would be enhanced to read actual coverage data
              coverageData += '‚úÖ **Tests:** All tests passing\n';
              coverageData += '‚úÖ **Linting:** No ESLint errors\n';
              coverageData += '‚úÖ **TypeScript:** Type checking passed\n';
              coverageData += '‚úÖ **Coverage:** Above 80% threshold\n';
              coverageData += '‚úÖ **Build:** Library builds successfully\n';
              coverageData += '‚úÖ **Security:** No vulnerabilities found\n';
              coverageData += '‚úÖ **Examples:** Demo applications build\n\n';
              coverageData += 'üéâ **Quality gate passed!** Ready for merge.';
            } catch (error) {
              coverageData += '‚ùå Quality gate failed. Please check the workflow logs.';
            }
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: coverageData
            });

  dependency-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Check for outdated dependencies
        run: |
          echo "Checking for outdated dependencies..."
          npm outdated || true
          
          echo "Checking for security vulnerabilities..."
          npm audit --audit-level high

      - name: License compliance check
        run: |
          echo "Checking license compliance..."
          npx license-checker --summary
          
          # Check for problematic licenses
          PROBLEMATIC=$(npx license-checker --csv | grep -i "GPL\|AGPL\|SSPL\|BUSL" || true)
          
          if [ -n "$PROBLEMATIC" ]; then
            echo "‚ö†Ô∏è  Potentially problematic licenses found:"
            echo "$PROBLEMATIC"
          else
            echo "‚úÖ No problematic licenses detected"
          fi